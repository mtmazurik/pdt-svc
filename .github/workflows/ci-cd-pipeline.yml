# Copyright 2020 Cloud Computing Associates LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
on:
  push:
    branches: [ main ]

name: CI/CD Pipeline for pdt-svc 
env:                 
  PROJECT: 'cloud-run-project-01'
  SERVICE: 'pdt-svc'
  PORT: '8081'
  REGION: 'us-west1'
  ARTIFACT_REGISTRY: 'us-west1-docker.pkg.dev'      
  ARTIFACT_REGISTRY_IMAGE: 'us-west1-docker.pkg.dev/cloud-run-project-01/pdt-svc/pdt-svc:latest'
  DOCKERHUB_IMAGE: 'mtmazurik/pdt-svc:latest'
  DOCKERFILE_PATH: './pdt.svc'   
  APP_SEARCH_RESULTS_MAX: 50                        
  
jobs:
  build:       # job: pushes the docker image with :latest tag
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU hypervisor
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx (BuildKit engine)
        uses: docker/setup-buildx-action@v1

      - name: Log on to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build image to DockerHub
        id: docker_build
        uses: docker/build-push-action@v2                       
        with:
          file: ${{ env.DOCKERFILE_PATH }}/Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_IMAGE }}

  pullandpush:  # job: get image from DockerHub to Artifact Registry / Docker repo (called: pdt-svc )
    needs: build                                                
    runs-on: ubuntu-latest
    steps:
    - name: Auth
      uses: google-github-actions/auth@v0               
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}   

    - name: Configure GCP Docker Client
      run: |-
        gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }} --quiet

    - name: Pull and Push to GCloud Artifact registry Docker repo
      run: |-
        docker pull ${{ env.DOCKERHUB_IMAGE }}
        docker tag ${{ env.DOCKERHUB_IMAGE }} ${{ env.ARTIFACT_REGISTRY_IMAGE }}
        docker push ${{ env.ARTIFACT_REGISTRY_IMAGE }}
        
  deploy:   # job: Google Cloud Run deployment with secrets / env variables
    needs: pullandpush                                          
    runs-on: ubuntu-latest
    steps:
    - name: Auth
      uses: google-github-actions/auth@v0               
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}   
 
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    - name: Get from Secret Manager service   # pre-req: referenced secrets setup, in Secret Manager instance in GCloud project (see, https://github.com/google-github-actions/get-secretmanager-secrets )
      id: 'secrets'
      uses: 'google-github-actions/get-secretmanager-secrets@v0'
      with:
        secrets: |-
          CX:${{ env.PROJECT }}/APP_GOOGLE_SEARCH_CX, \    #  token:{project}/{secretName}
          API_KEY:${{ env.PROJECT }}/APP_GOOGLE_SEARCH_API_KEY

    - name: Deploy image to Cloud Run
      run: |-
        gcloud run deploy ${{ env.SERVICE }} \
        --region=${{ env.REGION }} \
        --image=${{ env.ARTIFACT_REGISTRY_IMAGE }} \  
        --port=${{ env.PORT }} \
        --allow-unauthenticated \
        --set-env-vars=Env_Secrets__GoogleCustomSearchCx=${{ steps.secrets.output.CX }},\  
                       Env_Secrets__GoogleCustomSearchApiKey=${{ steps.secrets.output.API_KEY }},\
                       Env_SearchEngine__SearchResultsMax= ${{ env.APP_SEARCH_RESULTS_MAX }}